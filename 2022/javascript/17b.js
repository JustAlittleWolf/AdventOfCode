/* CONCATENATED MODULE FROM 17_Tunnel.js */
/* CONCATENATED MODULE FROM 17_JetManager.js */
/* CONCATENATED MODULE FROM 17_Vec2.js */
class Vec2 {
    x;
    y;
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    static add(vec0, vec1) {
        return new Vec2(vec0.x + vec1.x, vec0.y + vec1.y);
    }
    static sub(vec0, vec1) {
        return new Vec2(vec0.x - vec1.x, vec0.y - vec1.y);
    }
}

class JetManager {
    jetMemory = [];
    count = -1;
    constructor(input) {
        this.jetMemory = input.split("");
    }
    next() {
        this.count++;
        if (this.count >= this.jetMemory.length)
            this.count = 0;
        switch (this.jetMemory[this.count]) {
            case ">":
                return new Vec2(1, 0);
            case "<":
                return new Vec2(-1, 0);
            default:
                throw new Error("Could not parse Steam Jet: " + this.jetMemory[this.count]);
        }
    }
    freshCycle() {
        return this.count == 0;
    }
}

/* CONCATENATED MODULE FROM 17_Material.js */
var Material;
(function (Material) {
    Material["Air"] = ".";
    Material["Rock"] = "#";
})(Material || (Material = {}));
function fromString(input) {
    switch (input) {
        case Material.Air:
            return Material.Air;
        case Material.Rock:
            return Material.Rock;
        default:
            return Material.Air;
    }
}

/* CONCATENATED MODULE FROM 17_Rock.js */


class Rock {
    shape = [];
    pos = new Vec2(0, 0);
    nextRock = "Flat";
    static Flat = new Rock("####").setNextRock("Plus");
    static Plus = new Rock(".#.\n###\n.#.").setNextRock("L");
    static L = new Rock("..#\n..#\n###").setNextRock("I");
    static I = new Rock("#\n#\n#\n#").setNextRock("Square");
    static Square = new Rock("##\n##").setNextRock("Flat");
    constructor(input) {
        let height = input.split("\n").length - 1;
        input.split("\n").forEach((row, y) => {
            if (!(this.shape[height - y] instanceof Array))
                this.shape[height - y] = [];
            row.split("").forEach((character, x) => {
                this.shape[height - y][x] = fromString(character);
            });
        });
    }
    getMaterial(x, y) {
        if (!(this.shape[y] instanceof Array))
            return Material.Air;
        if (!this.shape[y][x])
            return Material.Air;
        return this.shape[y][x];
    }
    getPos() {
        return this.pos;
    }
    setPos(vec) {
        this.pos = vec;
    }
    getWidth() {
        return this.shape[0].length;
    }
    getHeight() {
        return this.shape.length;
    }
    toString() {
        return this.shape.reduceRight((acc, cur) => acc + "\n" + cur.reduce((acc_, cur_) => acc_ + cur_, ""), "");
    }
    getNextRock() {
        if (Rock[this.nextRock] instanceof Rock)
            return Rock[this.nextRock];
        return Rock.Flat;
    }
    setNextRock(next) {
        this.nextRock = next;
        return this;
    }
    getShape() {
        return this.shape;
    }
}


/* CONCATENATED MODULE FROM 17_input.js */
let input = `><<<<>><<<>><>>><<<>>>><<<<>>>><<>>><>>><>><<<>>><<<>>>><>><>>>><<<>><<<<>><<<><<<<>>><<>>><<><<<>>>><<<><>><<>><<<<>>><>>><<<>>>><<<<>>>><><>>><>>><<<<>>>><<<<>>><<<<><<<>>>><<><<<>>>><<<<>>><>>>><<<>>>><>>><<>>><<<>><<<<>><<>>><<<><<>>><<>>>><<>>><>>><<<>>><<<>>>><<>>><<<>><<<<>>><>>>><<><>>>><>>>><>>>><<>><<<>>>><<<>>><<>>>><<<<>>>><<<><>>>><<<>>><<<<>>><<>>>><<<<>><<<>>>><<><<><<>><<<<>>>><<>>>><<<<>><<<<>>><<>>>><<>>><<<>>>><<<<>><>><<<<>><<<<><<<<>>><<>>><<<<><<<<>>>><>>><<<<>><<>>>><<<><>><<<<>>>><><<<><<<<>>>><<<>>><<<><><<<>>><>>><>>>><<<>>><<><><<>>><<<<><>>><>><>><<>>>><<<<>><<<>><<<>>><<>>><>>>><><<>>><<<<><>><>>>><>>>><>><>><<>>><>>><>>><<<<>><<<<><<<>><<><>><>><<<<>>>><<>><<<>>>><<><<<><<<<>><<<>><<>><>>>><<>>>><<>>>><<>>><<<><<<>><<<>>><<<<>>><>><<>><<<><><<<<><>>><<<<><<<>>><<<>>>><<<><<<>><<<<>>>><<>>><<><><<<<><>><<<><<<<>>><<<<>>>><<><<><<<<>>>><<<>>>><<<<>><<<<>><<<<>>><<<<>>><<>>>><<>>>><<<>>><<>>>><<<><<>>>><><<>>>><>>>><<>><>>>><<<>><<<<>>>><<<>><>>>><<<>><<>>><<<>>>><>>><>>>><<<>><<<>>>><<<<><<<<><<<<>>>><<>><<<><<>>>><<<>>><>>>><><<<><<>><<<><<<>>><>><<<><<<>><>><<<<><<<<><>><<<>>><<<>>><>>><<<<><>>><<<>><<<<>>><><<<>>>><<<><>><<<><<<<>><<<<>>>><><<<<>>><<<<>>>><<<<>><>><<><<<<><<>>><<>>>><<<><<>>>><>><<<><<>><>><<<<>><><<>>>><<>><><<>>><<<>><<><<<>><<><<><>>>><<<<>>><>>><<<>>>><<><<<>>><<<<><<<<>>>><<><>><><<>>><>><><<<>><>>>><>><<<<><<>>><<<<>>><<<>><<<<>>><>>><<<<>>><>>><<<<><<<<>><<<<><<<><<<>>>><<<>>>><<<>>>><<<<>><>><<<<>>><<<<>><<<>><<<>><>>>><<><>>><<<>>>><>><><><>>><<>>><<<>><>><<>>>><<<<>>><<<<>><<><<<<>><>><>>><<<><<>>><<><<><<>>><<>>><<<<>>><<><<<>>>><>>><>>>><<<<><<<>>><<>>><>><<>>>><<<>><<<<>><<<<>><<<>><<<<><<<>><<>>><<<<>>>><<><<<>><><<<<>>><<<<>>>><<<>><<>>><>><<<<>>>><>>><<><<<<>>>><>><<<>>>><<>>>><<<>>><><<<>>>><>>><<><<<><>>><<><<<<>><<>>>><<<<>>><<<<><<<>>>><<<<><<<<>><<<<>><>>>><<><>><<<>>><>><<>><<<<>>><<<>><<><<<<>><<<>>>><<>>>><<<<><><<<<>>>><<>>><<<>>><<<>><<>><<<><>>>><<><<<>><<<>>>><>>><<>><<<><><><<<>>>><>>>><<<<>>><<<><<<<>>><<>>><<<>><<<><<<<>>><<<<>><<<<><<>>>><>><<<<>><<<>>>><<<<>>><<<>><<>><<<>>>><>><>>><>>>><<>>>><<<>><<<<>>>><<<>><<<>>>><<<<>><<<>>><>>><>>><<>><>>><<<<>>>><<><><<><<<<>><>>><>>>><<<>>><<>><><>><><<<<>>>><<<>>>><>>>><>>>><<<<>><<<>><<>><<>>>><<<><>>><<>>><<>>><<<>>><<<<><<>><<><<>><>>>><<<<>>>><>><<>><>>><<<>>><>>>><<>>>><>>>><<<><<<>>>><<<<>><<>>><>><<>>><<<>>>><<<<><>>>><<<<>><<><><<<<>>><>>><<<>><><>><>>><<>>>><<<<><<<>>>><<<>><<>>><<<>><<<>><<<<><><>>>><<>>>><<>>><<<>><<<<><<<><<>>>><>>><<<>><<<<>><>>>><<<<>>>><<<<>>>><>>>><>>>><<<>>><>>><<>><<<>><>><<<<>><<<<>><<<><><<><<<<>><>>><>>><<<>>>><><><<>>>><<<>>><<<<>>><>>>><<<>>><<<><<<>>>><<>>><<<>>>><>>>><<><<><<<<>><<<><<<<>><<<>>>><<><<<<>>><<<<>><<>>>><<<<>><>>>><>><<<>>>><<<<><<<<><><<<><<><<<<><<<><<<<>>>><<<<>>>><<>>><<<<><<><<<<>>><<<<>>><>>>><>><>>><><<<>>><>>>><>><<<>><<<<>>><<>><<><<<>>>><<><<><<><<>><<<>>><<<>>><>>>><>><>><<<<>>>><<>>><<<<>>><<>><<<<><<>>>><>>>><<<<>>>><<<<>><>>><<>>>><<<><<<<>><<<<><<>>>><><<>>><<<<>>>><<>>><<><<>><>>><>>>><<>><<<><<<<><<<<>><<<>><<>>>><>><<<<><<<>><<><<<<><<<>><>>>><<>>><<<<><>>><<<<>>>><<<>><>>>><>><<<<>><>><<<<>>>><>>><><>>><<><>><<<>>>><<<>>><<<<><<<<>><>><<>>>><<<<>><>><<<>><<<<>>>><<>>><<<><<<><<<<>><<<<><<>>>><<<<>>>><<<<>>>><<<>><<<<>><>>><<>>><<<<>>><>>>><<<<><<>><<<>>>><><<<<><<<>>><<<<><<<<>><<<>><<<<>>><<<<>>><<><<><<<>>>><><<<>>>><<>>><<<<>>>><<<<>>>><>>>><<<<>>>><>>><<<>><<<<>>><<><><<<<>>>><<<>>>><>>>><<>>><<<<>>><<<<>><<><<<>><>>>><>>><>><>>><<>>>><<>>><<<<><<<>><<>>><>>>><<<><>><<>>>><>>><<>>><<<>>><<><<<<>>><<>><<<<><<>>><<<><<<>>><<>>><<<<>><><<<>>>><<<<>>><><<>><<<><<<<>><><<<<>><<<>><>><><<<>>><<<<>>><>>><<>><<<>><>><<>><<<><<<>><<>>>><<>>><<><<>>>><<>>>><><>>><<><<<<>><><><<<>><<<>>>><<<>><>>><>>>><><<<>><><>>><>>><<>>><><<<<>>>><<><<<<>>>><<>>>><<<<>>>><<><<<<>>><<<>>><<>>>><<<>>><<<<>><<><<<<><>>>><<<<><<>><>>>><>>><<<<>><<<>>>><<<<>>><<><<<<>>><<<>>><>>><<<<>>><<<<>><>>><<<<>>><>><<<>>><<<<>><<<<>><<<<><>>><>>>><<>>>><<>><<>>>><><<>>><<<>><>><>>><<<<>>><<<>>>><<<>>>><<>>><<<<>>><>>>><<<<>><<>>><><<<>>><>><>><<>><><<<<>>>><<><<>><<<>>>><<<>><>><<><<<<>><<<>><<<>><<<>>>><<<>>><<<<><<><<<<>>>><<<><<>>>><<<><<<>>><<<>>><<<>>><>>>><<<<>>><<<>><<<<>>>><<<><>>>><<><<<<>>>><<<>>><<<>>>><<<<>>><<<<><><<>>>><>><<<<>>>><<><<<<>>>><<<<>>><<<<><>>>><>><>>><<<>>><<<<>><>><>><>>><<>><>>><<>>><><<<<><<<><<>>><<><>>><<><<>>>><>>><<>>>><<<>>><<<>>>><<>>>><<>>>><<>>>><<<<>><<<<><><<<><>>>><<<><>><<<>>><<<<><<><<>>><<>>><<>><<<<>>>><<>>><<>>><<<>>>><<<>>><<<>>>><<<>>><<<<>>>><><<<><<<>><<>>>><<>>><<<<><<<>>>><<>>><<>>><<<>><<>>><<><>>><<<<>>>><<<>>><<<><<<<>>>><<<>>><<><>>><<><<<>><<>>><<<<>><>>>><>>><<<>>><<<>>>><<<<>>><<<>>><>>><>>><<<><<<>><<<><<<<>>><<>>><>>>><<<><<<<>>><<>>><>><<<>>><<><<><<>><<<<>><<<>>><<><<<<><<<<>><<<<>>>><><<<><>>><<>><<<<>>><>><>>>><<><<><<<>><<>><<>>>><<<<><<<>>>><<<>>>><<<>>>><<<><<<<>>>><<<>><<<<><<<>><>>>><>>><<><>>>><>>><<<<>>><<<<>>><<<>><<>>>><<<>>><><>><>><<>><>>>><>>>><>>>><>><<>>>><<<>><<><>><<<<>>><<<>>><<<<>><<<<><<<<>><>>><<<><><<<><<><<>>><<><<><<<>>>><<<>>><<<<>>><><<<>><<<>>>><<<>><>><<<>>><<<<>><>>><<<>><>><<<<>>>><<><>>>><<<><<><<>><>>>><<<<>>>><><<>>>><<>><<>>><><<<>>>><<<>>><<<>>><>><><<<<>><<<<>>><<<<>><<<<><<<>>>><<>>>><<>><<>>>><<><>>>><<>><<<<>>><<<>><>>><<<<>>>><<>><<<<><<<<>>>><<>>><<<>>><<<<>>>><><<<<>><<<><<<<><>>>><<><<><<>><>>>><><>>><<<>>><<<>>>><<>>><<<<>><<<<>>>><<<><<<>><<>>>><>><<><<<>><<<<><>><<>><<<>><<><<<<>>>><<>>>><<<>>>><<<>><<<<><<<<>>>><>>><>>><<<>>><<>><>>><<<>>>><<<>><>>>><><>><<<>><<><<<>><<<>>><<<<>>><<>>><<>>><<<<>><>>><<>>><>>><<<>>><<<<><<>>>><<<<>>><<<<>><<<>>><<>>>><>>><<<<><>>><<<>><<><<><<><><<<>>><<<>>>><<><>><<<>><<<<>><<>>><>>><<<<>><<<><<<<>><>>><>>>><<<<><<<<>>>><<<<>>>><<><<>>>><<<<>><>><<>>><>>>><<>><>><<<>><<<>>><<<<>><>>><<<<>>>><<<>>>><<<<><><<<<><<>>><<<<>>>><<<<>><<<<><<<<><>><><<>><<<>><<<<>>>><<<<>>><<<>>>><<<>><<<>>><>>><<<<>><<<<><<<>><<<<>>>><<<>><<<<><<>><<<>>>><<<<><<<<>>><>>><<<>>><<<>>>><>><>>><<><<><<<<><<>>>><<>>>><<<>>>><<<>>><<<>><<<><<<><><<<>>>><<<<><>><<<>>><>>>><<<>>>><>>>><<>><<><<>>>><<<<>>>><<<<><<><>>><<<<>><<>>><<>><<<>><>><<>>><<<>>>><<<<>><<<>><<<<><<<>><<<<>>>><<<>>>><<<>><><<<>>>><<<>><<<<><><>>><>>><<>><<<>>>><>>>><>>><<<<>>><<<<>>>><<<>><>>>><<>><>>>><<<>>>><<>>>><<<<>>>><<<>><<<<><<<<>>>><<<>>><><<<>>>><>>><<<<>><<<<>>><><<<<>><<<>>><<<<>>><<<><<<<>>><<<>>>><<<><<<><><<<<>>><<<<>>><<<>><<<<>><><<<>>><>>><<<>>><<<>>>><>>>><<<><<>>><<>>><>>>><<<>><>><><<<<>>><<<>>>><<>>><<><>>>><<<>><<<><<><<<>>>><>>>><<<<>><<<<>><<<>>>><<<><<<><>>>><<<<>><<><<>>><<<<>>><>>><<<><><<<<>><>><>>><<<>>>><<<><><<<<><<<<>>><<><<<<>><<>>>><<><>>>><<<>>><<<>>>><<<>>><><<<<><<>>><<><<<><<<<>>><<>>>><>><<<>>>><<>>>><<><<<>>><<>>>><>><<<>>>><<<<>>>><>>><<><><<><><>><<>><>><>><<>>>><<>><<<<><<<<>>>><><<>><>>>><<><<><<>>><<<><<<>>>><<<>>>><<<<>>><<<>>><<<<>><<<>>>><<<><>>><><<<<><<<<>>>><<>>>><>>>><<>>>><>>><<>><<<<><<<<>>>><<<<><>>>><<<>><<>>><<<<><<>><<>><><<<>>><<<>>>><<<>>><>>><><<<<>>>><<>>>><>>>><><<<<>>>><<>>>><<>><>>>><<<<><<<>>>><<>><<<<>>>><<<><<<><<<>>><<>>><>><<>>><>><<<>>><<<<>><<>><<<>>>><<<>>>><<><<>>>><<>><<<<>><<<>>>><<>>>><<<>>><<><<>>>><<>>><>>>><<<><<<>><>><<<<>>><<>><>><<>><>>>><><<<>><<><<>>><<>><<<><<><<><<<><><<>>>><<<><<<>>><>>>><<<>>>><<<<>>><<<><>>><>>>><<>><<<<>><>><<<>><<>><<<><><<>>>><<<<>>><<<>>><<<<>><<>><<<>><>><<<>>><<<>>><<<<>>>><<>>>><<<<>>><<<>><<<<><><<<<>>>><>>>><<<<>><<<<><<<<>><>>>><<<><>><<<>>><<<<><<<<>>><<<<><<>>>><<><>><<<>>>><<<<>>>><>>><<<>><<<<>>><>>><>><<<>>><<<>>>><>>>><<<<>><<>><<<>>><<<<>>><<<<><<<>>><<<><<<<><><<<><<><<<><<<<>>><<<<>><<<<>><>><>><<><<<>>><<<><<><<>>><<<<>>><<<>>>><<><<<>>>><<<>><<<>><>>>><>>><>><<<>><<>>>><<<<>>>><>><<>><<<>>><>>>><<>><<<>><<><<>>>><><<<><>>><<>>>><<<<>>>><<<>>>><<<>>><<<><<<>>>><<<>>>><<<>>>><<<<><>>><>><<>><<<><<<><<>><>>><<<>>><<<>><<<>>><<<<>>>><<<<><>>><<>>><>>><<<<>><<>><>>>><<>>><<<<>>><<<<>>><<<<><<<<>>><<<>><><><<<><<<<>>><>>><<><>><<>>>><<>>><<<>>>><<<<>>><<<>><<>><>>><>>><<<<>>>><<<<>>>><<>><<<<>>>><>>>><<<><<<>>><<<>>>><<<<>>><><<<<>><<><<>>>><<<<>>><<<<>>><<<<><<<>>>><<><<>>>><><<<>>>><<><<>>><<>>>><<<><<><>>><<<<>>><<<>>>><<><<>>><<<<><>>>><<>>><<<>>>><<<<><<>><<>><<>>><><<<>><<<<>><><<<<><>><<>><<<>>>><<>>>><>>>><<><>><>>><<<>>><>>>><<<><<><<<>><<<>><<>>><<><<>>><<<>>><<<>>>><>>><>><><<><<>>><<<<>>><>>><<<><<><<<>><>><<>>><>>>><<>>>><<<><>>>><<>>>><>>>><<<<>>><<>>><>>><<>><<><<<<>>>><>>><<>>>><><<><<<>>><<>><>>><<<<>>>><>>>><<<>>><<<>><<<>><<>>>><>><>>><<<><<<>>>><<<<>><<>>><<<<>>><<>>><<>>><>>>><<<<><<<>>>><<<>>><<<<><<><<>>>><<<>>><<<<>>><><<<<>><<<><<<<>><<<>><<<<><<<<>>>><>><>>><<><<<>><<<>>><><<<<>><<<<>><<>>><<<<>>><>>><>><<<>><<<>><>>><<<>>>><<<>><<<<><<><<<<>>><<<>>>><<<<>>><<<<>>><><<<>>><<<>><<<<><<<<><<<>>><<<>>>><><<<>><>>>><<<<>><<>>><<<>>><<>>>><<<<>>>><<>>>><<<<>>><<>>><<>><>>><<>>><<<<>><>>><><>><><<>>>><<>>><>>><<<<><<<<>><<<<>>><<<<>>><<<<>>>><<<<>>><<<><><<<<><>>>><>><<<<>><<<<><<>>>><><>>>><<<<>><<>>>><<<><>>>><<<>><<<>><>><>>>><<<>>><<<>>><<>>>><<<><<<>><>>>><>>><<<>>>><><<>>><<<>>>><<>>>><<<>>>><<<<><<><>><>>>><<>>>><<<<>><<<><<<<>>><>>><<<>>><>><>>>><<<<>>>><<<>><<>>><>>><<<>><<<<>>><<<>>><<>>><<>>><>>>><<>>>><<<<>>>><<>>>><<><<>><>>>><<>>>><<<<>>>><<<<><<<><>>>><<<>>>><<<<>>>><><<<><<<<><<<<>><<<><>>><<>>><>><<>>>><<>><<<<>>>><<>>><<>>>><<>><>><><>><<<<><>>><<>>>><<>>>><>>><><<<><<<<>>><<<>>>><<>>><<<<>><<>>><<<<>>><<<<>><<>>><><<>>><<>><<<>>><<>>><<<>>><<>><<><>>>><>><>>><<>><<>>><<<<>>>><<<>>>><<<<>><<<<>>>><<<<><<<><>>><<<<><<>>><<>><<<<><<<><<<><<><<><>>>><<>><<<><>><<>><<<><<<><<<>>><<<><<>><<<><<<>>>><<>>>><<><>>>><<<<>>><><<><<<>><>>>><<<>>><<<>>>><>><<<>>>><<>>>><><<<>>><<>><><<>><>>><<>>><<><<<>><<<<>><><<<<>>>><<><<<<>>>><<<<>><<<><<<<>><<<<>>><<><<><>><><<<>>>><<<>>>><<<<>><<<>>><<>>><<>>>><>>>><<>>><>>>><<<<>><<<>>><<<><>>><>>><<<><<<<>>>><<<>>>><<<<><>>><<<>><<>><<>>><<>>>><>>><<<>>><<<>>>><<<>>>><<<<>><><<<><>><>><<<<>>>><<<>>>><<><>><><<<<>>>><><>>>><<>><<<<>><<<<><<<<>>>><<<>>><<<>>><<<>><<<<>><<>><>>><<>><<>><<<<>>>><<<>><>>>><<<<>>>><<<>>>><<>>><<<>>>><<<<><<<>><<<>>><<<<>>><><<>>>><<>>><<>>>`;

/* CONCATENATED MODULE FROM 17_CyclePattern.js */
class CyclePattern {
    towerHeight;
    name;
    rockNum;
    constructor(towerHeight, name, rockNum) {
        this.towerHeight = towerHeight;
        this.name = name;
        this.rockNum = rockNum;
    }
    static areEqual(cycle0, cycle1) {
        return cycle0.name == cycle1.name;
    }
}

class Tunnel {
    width;
    structure = [];
    curRock = Rock.Square;
    jetManager = new JetManager(input);
    rockNum = 1;
    cycles = [];
    syntheticHeight = 0;
    constructor(width) {
        this.width = width;
        this.summonNextRock();
    }
    simulateStep() {
        let sideMovement = this.jetManager.next();
        this.tryMove(sideMovement);
        if (!this.tryMove(new Vec2(0, -1))) {
            this.settleRock();
            this.summonNextRock();
        }
    }
    simulateRocks(rocks) {
        while (this.rockNum <= rocks) {
            this.simulateStep();
            this.checkCycle(rocks);
        }
    }
    checkCycle(rocks) {
        if (!this.jetManager.freshCycle())
            return;
        let curCycle = new CyclePattern(this.getHeight(), this.curRock.toString() + (this.getHeight() - this.curRock.getPos().y), this.rockNum);
        let matchingCycles = this.cycles.filter(cycle => CyclePattern.areEqual(cycle, curCycle));
        if (matchingCycles.length <= 0) {
            this.cycles.push(curCycle);
            return;
        }
        let cycleHeight = curCycle.towerHeight - matchingCycles[0].towerHeight;
        let cycleRocks = curCycle.rockNum - matchingCycles[0].rockNum;
        let syntheticCycles = Math.floor((rocks - this.rockNum) / cycleRocks);
        this.rockNum = syntheticCycles * cycleRocks + this.rockNum;
        this.syntheticHeight = syntheticCycles * cycleHeight;
    }
    getHeight() {
        return this.structure.length;
    }
    getSyntheticHeight() {
        return this.structure.length + this.syntheticHeight;
    }
    summonNextRock() {
        this.curRock = this.curRock.getNextRock();
        this.curRock.setPos(new Vec2(2, this.getHeight() + 3));
    }
    curRockCollides() {
        let curPos = this.curRock.getPos();
        let collides = false;
        this.curRock.getShape().forEach((row, y) => {
            row.forEach((material, x) => {
                if (material == Material.Air)
                    return;
                if (this.getMaterial(curPos.x + x, curPos.y + y) == Material.Air)
                    return;
                collides = true;
            });
        });
        return collides;
    }
    tryMove(movementVec) {
        this.curRock.setPos(Vec2.add(this.curRock.getPos(), movementVec));
        if (this.curRockCollides()) {
            this.curRock.setPos(Vec2.sub(this.curRock.getPos(), movementVec));
            return false;
        }
        return true;
    }
    settleRock() {
        let curPos = this.curRock.getPos();
        this.curRock.getShape().forEach((row, y) => {
            row.forEach((material, x) => {
                if (material == Material.Air)
                    return;
                this.setMaterial(x + curPos.x, y + curPos.y, Material.Rock);
            });
        });
        this.rockNum++;
    }
    setMaterial(x, y, material) {
        if (!(this.structure[y] instanceof Array))
            this.structure[y] = [];
        this.structure[y][x] = material;
    }
    getMaterial(x, y) {
        if (x < 0 || x >= this.width)
            return Material.Rock;
        if (y < 0)
            return Material.Rock;
        if (!(this.structure[y] instanceof Array))
            return Material.Air;
        if (!this.structure[y][x])
            return Material.Air;
        return this.structure[y][x];
    }
    toString() {
        let sum = "";
        let curRockPos = this.curRock.getPos();
        for (let y = this.getHeight() + 3 + this.curRock.getHeight() - 1; y >= 0; y--) {
            for (let x = 0; x < this.width; x++) {
                let curRockMaterial = this.curRock.getMaterial(x - curRockPos.x, y - curRockPos.y);
                if (curRockMaterial == Material.Rock) {
                    sum += "@";
                    continue;
                }
                sum += this.getMaterial(x, y);
            }
            sum += "\n";
        }
        return sum;
    }
}

let tunnel = new Tunnel(7);
tunnel.simulateRocks(2022);
console.log("Tower height with 2022 Rocks: ");
console.log(tunnel.getSyntheticHeight());
console.log("");
tunnel.simulateRocks(1000000000000);
console.log("Tower height with 1000000000000 Rocks: ");
console.log(tunnel.getSyntheticHeight());